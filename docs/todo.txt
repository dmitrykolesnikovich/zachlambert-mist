
===== Purpose of resources, scene, renderer =====

- Resources: Handles the resources required for rendering, including
    shaders, textures/materials and meshes/models.
- Scene: Handles all the information necessary for defining a scene
    to be rendered, including the camera, lights, and entities, which
    make use of resources.
- Renderer: Take the scene information and render it. No rendering
    logic should be included outside this directory. Other classes should
    only contain the necessary information for rendering.


===== Usage of the Renderer =====

1. Construction
- Generate buffers for the static VBO and EBO, but don't configure
  them yet.
1. Load models:
- A model is a vector of meshes and materials
- A mesh is a vector of vertices and indices
- A material is a structure of properties and texture paths
2. While loading models, do the following:
- For each mesh/material pair:
  - Load the vertices into the shared vertices vector
  - Load the indices into the shared indices vector
  - If it uses a texture, get the texture id, store in the material
  - Add the material to the materials vector, store the index in the model
  - Determine the material shader, and get the shader id
- For the model:
  - Store a ModelObject stucture, containing a vector of VAOs
    and vector of MaterialObjects, with the texture id and shader id
3. Initialisation
- Initialise the VBO and EBO buffers, by calling glBufferData, and pointing
  to the shared vertices and indices vectors.
- For each mesh in each model, generate a VAO for that mesh, which can now
  get valid pointers to data (if getting pointers while adding to the data,
  they would invalidate whenever the vectors had to resize)
4. Adding entities
- A render object is a structure of: shader id, material index, VAO,
  mvp matrix (with unique mvp matrix id), and pointer to the entity.
- When adding an entity:
  - A render object is stored in the render object for each mesh/material pair
    These are stored in a map, ordered by shader id, material index, VAO, mvp id
  - A vector of pointers to these render objects is stored in the entity.
    On destruction, the entity calls invalidate() on all render objects, which
    causes them to be removed on the next render.
5. Rendering
- Accesses the global information: camera and lights
- Checks the dirty flag on any of these objects, and if set, recomputes
  necessary information (ie: their matrices)
- On rendering, the renderer iterates through the render objects, and due to
  how they are ordered, minimises the number of times it has to change the
  render environment (ie: changing shader, material, VAO, etc)
- When loading each shader, the global uniforms are loaded first
- When loading an entity mvp, it checks the dirty flag, and if set, recomputes
  the model matrix. If the camera view matrix was changed, the mvp matrix is
  also recomputed.
